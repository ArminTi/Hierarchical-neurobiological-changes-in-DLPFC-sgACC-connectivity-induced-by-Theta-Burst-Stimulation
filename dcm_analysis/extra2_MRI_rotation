import os
import nibabel as nib
import numpy as np
import matplotlib.pyplot as plt

# Function to rotate the MRI image
def rotate_mri(mri_data, degrees, direction):
    # Determine the number of 90-degree rotations needed
    rotations = degrees // 90
    if direction == 'clockwise':
        rotations = -rotations  # Counterclockwise is the default in np.rot90
    return np.rot90(mri_data, k=rotations)

# Define the input file and output directory
file_path = r'D:\signal_data\MRIs\all_MRIs\sub-16\sub-16_T1075TFESdag.nii'   # Update with your MRI file path
output_dir = r'D:\signal_data\MRIs\py_orientation'

# Create the output directory if it doesn't exist
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# Load the MRI file
mri = nib.load(file_path)

# Extract the original filename without extension
original_file_name = os.path.basename(file_path).split('.')[0]

# Extract image data
mri_data = mri.get_fdata()

# Visualize a slice before rotation
slice_index = mri_data.shape[2] // 2  # Select a middle slice for visualization
plt.figure()
plt.title("Before Rotation")
plt.imshow(mri_data[:, :, slice_index], cmap='gray')
plt.show()

# Specify rotation parameters
degrees = 90  # Choose degrees of rotation: 90, 180, or 270
direction = 'counterclockwise'  # Choose 'clockwise' or 'counterclockwise'
# subj4 90 counterclockwise
#

# Rotate the MRI data
rotated_data = rotate_mri(mri_data, degrees, direction)

# Visualize the same slice after rotation
rotated_slice = rotated_data[:, :, slice_index]
plt.figure()
plt.title(f"After {degrees}Â° Rotation ({direction})")
plt.imshow(rotated_slice, cmap='gray')
plt.show()

# Save the rotated data using the original filename in the output directory
rotated_file_path = os.path.join(output_dir, f'{original_file_name}_rotated_{degrees}deg_{direction}.nii')
rotated_mri = nib.Nifti1Image(rotated_data, affine=mri.affine)
nib.save(rotated_mri, rotated_file_path)

print(f"Rotated MRI saved to {rotated_file_path}")
