clear all;
close all;
clc;
% There is a manual code to check files one by one to make sure the head
% models are being efined correctly the indevidual fiducials and MRI data
% are working correctly once we determined this for each session of each
% subject we used the dcmspecify_looped_auto to automaticaly go through all
% the subjects 
% ----------------------------- Setup --------------------------------
original_path = path;
restoredefaultpath;
addpath('C:/Users/Skibidi/Documents/Programs/spm_25.01.02/spm')
spm('defaults', 'eeg'); % Start SPM with EEG defaults

% --------------------------- Define Paths ---------------------------
file_path = 'C:/Users/Skibidi/Documents/Research/team44_signal/all_spm_obj/newp_no_nm_AAC';
file_name = 'SPM_sub-*_ses-*_epoch-*_converted_data_*.mat';  % Files to be processed
files = dir(fullfile(file_path, file_name));
cd(file_path)

addpath('C:/Users/Skibidi/Documents/Research/team44_signal/code_looped');
MRI_path = 'C:/Users/Skibidi/Documents/Research/team44_signal/MRIs/all_MRIs';
MRI_file_pattern = 'sub-*_T1075TFESag.nii'; % Adjust the pattern if needed

output_folder = 'C:/Users/Skibidi/Documents/Research/team44_signal/DCM_Specified/newp_no_nm_AAC';
if ~exist(output_folder, 'dir')
    mkdir(output_folder);
end

%###########################################################################
% ------------------------- Define DCM Model Options ---------------------------
% General DCM options (set once)
global_DCM_options.analysis = 'CSD'; % Cross-spectral density
global_DCM_options.model    = 'CMM_NMDA'; % Neuronal model
global_DCM_options.trials   = 1; % Specify trial
global_DCM_options.Tdcm     = [0, 2000]; % Time window in ms
global_DCM_options.Fdcm     = [1, 40];   % Frequency window in Hz
global_DCM_options.Nmodes   = 8;     % Number of spatial modes
global_DCM_options.h        = 1;     % Number of DCT components
global_DCM_options.D        = 1;     % Downsampling
global_DCM_options.spatial  = 'IMG'; % Imaging spatial model
%###########################################################################

%% ------------------------- Loop over EEG files -------------------------
for i = 1:length(files)

    fprintf('Processing file %d of %d: %s\n', i, length(files), files(i).name);

    % Convert files(i).name to character array if necessary
    files(i).name = char(files(i).name);

    % ------------------- Extract Subject ID -------------------
    % Assuming filename format: example 'SPM_sub-01_ses-01_epoch-01_converted_data_ctbs.mat'
    [~, filename_no_ext, ~] = fileparts(files(i).name);
    tokens = regexp(filename_no_ext, 'SPM_(sub-\d+)_ses-(\d+)_epoch-(\d+)_converted_data_.*', 'tokens');
    if isempty(tokens)
        error('Filename does not match expected pattern.');
    end
    subject_id = tokens{1}{1}; % e.g., 'sub-01'

    % ------------------- Finding Corresponding MRI -------------------
    mri_pattern = fullfile(MRI_path, '**', [subject_id, '_T1075TFESag.nii']);
    mri_files = dir(mri_pattern);
    if isempty(mri_files)
        error('No MRI file found for subject %s.', subject_id);
    end
    % Converting folder and name to character arrays
    mri_folder = char(mri_files(1).folder);
    mri_name = char(mri_files(1).name);
    mri_file = fullfile(mri_folder, mri_name);
    mri_file = char(mri_file); % Ensure mri_file is a character array
    fprintf('Using MRI file: %s\n', mri_file);

    % ------------------- Load EEG Data -------------------
    D = spm_eeg_load(files(i).name);

    % ------------------- Initialize Inversion Structure -------------------
    val = 1;
    D.inv{val} = struct();

    % ------------------- Set MRI and Create Mesh -------------------
    % Set the mesh size (1-3)
    Msize = 3; 
    %1 represents a coarse mesh 
    %2 represents a medium mesh 
    %3 represents a fine mesh 

    % Creating the mesh using the MRI file
    mesh = spm_eeg_inv_mesh(mri_file, Msize);

    % Assignign the mesh to D.inv{val}.mesh
    D.inv{val}.mesh = mesh;

    % ------------------- Set Fiducials -------------------
    % Checks if fiducials are present in EEG data
    if ~isfield(D.fiducials, 'fid')
        error('Fiducials not found in EEG data.');
    end
    % Check if fiducials are present in the mesh
    if ~isfield(mesh, 'fid') || ~isfield(mesh.fid, 'fid')
        error('Fiducials not found in MRI data.');
    end

    % ------------------- Setup of Data Registration (Coregistration) -------------------
    S = [];
    S.sourcefid = D.fiducials;         % EEG fiducials
    S.targetfid = mesh.fid;            % MRI fiducials
    S.useheadshape = true;             % Set to true if you have headshape points
    S.template = 0;                    % 0 for individual head model
    M1 = spm_eeg_inv_datareg(S);       % Compute coregistration matrix

    % Updating datareg in D.inv{val}    
    D.inv{val}.datareg(1).sensors = D.sensors('EEG');
    D.inv{val}.datareg(1).fid_eeg = D.fiducials;
    D.inv{val}.datareg(1).fid_mri = mesh.fid;
    D.inv{val}.datareg(1).toMNI = mesh.Affine; % Transformation to MNI space
    D.inv{val}.datareg(1).fromMNI = inv(mesh.Affine); % Inverse transformation
    D.inv{val}.datareg(1).modality = 'EEG';

    % ------------------- Visualize the Head Model and Electrode Positions -------------------
    % Display the data registration
    spm_eeg_inv_checkdatareg(D, val);

    % Pause to inspect the figure
    % pause; 

    % Save the figure
    output_figure_path = fullfile(output_folder, sprintf('HeadModel_%s.png', subject_id));
    saveas(gcf, output_figure_path);

    % Close the figure
    close(gcf);

    % ------------------- Set Forward Model -------------------
    D.inv{val}.forward(1).voltype = 'EEG BEM';  % Specify the forward model

    % ------------------- Compute Forward Model -------------------
    D = spm_eeg_inv_forward(D, val);

    % ------------------- Save the Updated EEG Data -------------------
    D.save;

    % ------------------- Prepare DCM Structure -------------------
    DCM = []; % Initialize DCM structure for this iteration
    DCM.name = ['DCM_' filename_no_ext];
    DCM.xY.Dfile = files(i).name; % Ensure DCM uses the updated EEG data
    DCM.options = global_DCM_options; % Copy the options set earlier
    DCM.options.mod_int = 1;

    % ------------------- Specify Regions of Interest -------------------
    DCM.Lpos  = [[-38; 44; 26], [38; 44; 26],[-10; 20; -15],[5;15;-15]];
    DCM.Sname = {'L.DLPFC','R.DLPFC','L.sgAAC','R.sgAAC'};

    % ------------------- Define Connectivity Matrices -------------------
    Nareas = size(DCM.Lpos, 2);
    DCM.A{1}             = ones(Nareas);


    DCM.A{2}             = ones(Nareas);


    DCM.A{3} = zeros(Nareas); % Lateral connections
    DCM.B = {}; % No modulatory effects data is rest
    DCM.C = []; % No external inputs data is rest

    xU.name = '';
    xU.X = [];    %'design matrix' step4
    DCM.xU = xU;
    % ------------------- Process Data to Initialize DCM.M.U -------------------
    DCM = spm_dcm_erp_data(DCM);
    Ns = Nareas;

    % ------------------- Specify Neuronal Model -----------------------
    DCM.M.dipfit.model = global_DCM_options.model; %% specific the 'CMM models'
    DCM.M.dipfit.type  = global_DCM_options.spatial; %%% 'IMG' forward model 
    %DCM.M.dipfit.Nc          = Ns;
    %DCM.M.dipfit.Ns          = Ns;
    %DCM.M.U                  = eye(Ns,Ns); 
    DCM.M.nograph=1;%% supress visual feedback during model fitting

    DCM = spm_dcm_erp_dipfit(DCM, 1 );

    

    % -------------------- Specify Priors -----------------------------
    % neural priors
    [pE,pC]  = spm_dcm_neural_priors(DCM.A,DCM.B,DCM.C,global_DCM_options.model);
    [pE,pC]  = spm_L_priors(DCM.M.dipfit,pE,pC);
    [pE,pC]  = spm_ssr_priors(pE,pC);
    DCM.M.pE = pE; % prior
    DCM.M.pC = pC; % prior covarience
     
    % ------------------- Load Cross-Spectral Data -------------------
    DCM = spm_dcm_csd_data(DCM);

    % ------------------- Max Number of VB Iterations -------------------
    DCM.M.Nmax = 256;
    DCM.M.nograph = 1; % Suppress graphical output

    % ------------------- Save Specified DCM -------------------
    save(fullfile(output_folder, DCM.name), 'DCM');
    fprintf('Saved DCM: %s\n', fullfile(output_folder, DCM.name));

end

% Restore original path
restoredefaultpath;
path(original_path);

fprintf('DCM specification and head model preparation completed for all files.\n');
